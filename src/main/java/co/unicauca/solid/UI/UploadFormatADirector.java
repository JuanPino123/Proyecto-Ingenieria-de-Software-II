package co.unicauca.solid.UI;

import co.unicauca.domain.FilesHistory;
import co.unicauca.domain.FormatA;
import co.unicauca.domain.utilities.FormatDate;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.sql.Date;
import java.time.LocalDate;
import java.util.UUID;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Valentina
 */
public class UploadFormatADirector extends javax.swing.JPanel {

    private FilesHistory fileFormatA;
    private FilesHistory fileAcceptanceLetter;
    private static UploadFormatADirector instance;
    private int idTeacher;

    public static UploadFormatADirector getInstance() {
        if (instance == null) {
            instance = new UploadFormatADirector();
        }
        return instance;
    }

    public int getIdTeacher() {
        return idTeacher;
    }

    public void setIdTeacher(int idTeacher) {
        this.idTeacher = idTeacher;
    }

    /**
     * Creates new form UploadFormatATeacher
     */
    public UploadFormatADirector() {
        initComponents();
        btnUploadLetter.setVisible(false);
        txtUploadLetter.setVisible(false);
        lblCurrentDateShow.setText(FormatDate.getCurrentDateFormatted());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        pnlAtributes = new javax.swing.JPanel();
        lblTitleProjectDegree = new javax.swing.JLabel();
        txtTitleProjectDegree = new javax.swing.JTextField();
        lblMode = new javax.swing.JLabel();
        cbxMode = new javax.swing.JComboBox<>();
        lblCurrentDate1 = new javax.swing.JLabel();
        lblCurrentDateShow = new javax.swing.JLabel();
        lblDirector = new javax.swing.JLabel();
        txtDirector = new javax.swing.JTextField();
        lblCoDirector = new javax.swing.JLabel();
        txtCoDirector = new javax.swing.JTextField();
        lblGeneralObjective = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtGeneralObjective = new javax.swing.JTextPane();
        lblSpecificObjectives = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtSpecificObjectives = new javax.swing.JTextPane();
        btnUploadFormatA = new javax.swing.JButton();
        txtUploadFormatA = new javax.swing.JTextField();
        btnUploadLetter = new javax.swing.JButton();
        txtUploadLetter = new javax.swing.JTextField();
        pnlSaveAndHome = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        btnBackToHome = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(500, 444));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Subir formato A");
        jLabel1.setToolTipText("");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel1.setVerifyInputWhenFocusTarget(false);
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 15, 500, 65));

        pnlAtributes.setLayout(new java.awt.GridLayout(9, 0, 10, 2));

        lblTitleProjectDegree.setText("Titulo del proyecto de grado:");
        pnlAtributes.add(lblTitleProjectDegree);
        pnlAtributes.add(txtTitleProjectDegree);

        lblMode.setText("Modalidad:");
        pnlAtributes.add(lblMode);

        cbxMode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Investigación", "Práctica profesional" }));
        cbxMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxModeActionPerformed(evt);
            }
        });
        pnlAtributes.add(cbxMode);

        lblCurrentDate1.setText("Fecha actual:");
        pnlAtributes.add(lblCurrentDate1);

        lblCurrentDateShow.setText("_");
        pnlAtributes.add(lblCurrentDateShow);

        lblDirector.setText("Director:");
        pnlAtributes.add(lblDirector);
        pnlAtributes.add(txtDirector);

        lblCoDirector.setText("Codirector:");
        pnlAtributes.add(lblCoDirector);
        pnlAtributes.add(txtCoDirector);

        lblGeneralObjective.setText("Objetivo general:");
        pnlAtributes.add(lblGeneralObjective);

        jScrollPane1.setViewportView(txtGeneralObjective);

        pnlAtributes.add(jScrollPane1);

        lblSpecificObjectives.setText("Objetivos especificos:");
        pnlAtributes.add(lblSpecificObjectives);

        jScrollPane2.setViewportView(txtSpecificObjectives);

        pnlAtributes.add(jScrollPane2);

        btnUploadFormatA.setText("Subir formato A");
        btnUploadFormatA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadFormatAActionPerformed(evt);
            }
        });
        pnlAtributes.add(btnUploadFormatA);

        txtUploadFormatA.setEditable(false);
        pnlAtributes.add(txtUploadFormatA);

        btnUploadLetter.setText("Subir carta de aceptacion");
        btnUploadLetter.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnUploadLetter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadLetterActionPerformed(evt);
            }
        });
        pnlAtributes.add(btnUploadLetter);

        txtUploadLetter.setEditable(false);
        pnlAtributes.add(txtUploadLetter);

        add(pnlAtributes, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 80, -1, -1));

        pnlSaveAndHome.setLayout(new java.awt.GridLayout(2, 0, 0, 7));

        btnSave.setText("Guardar");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        pnlSaveAndHome.add(btnSave);

        btnBackToHome.setText("Home");
        btnBackToHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackToHomeActionPerformed(evt);
            }
        });
        pnlSaveAndHome.add(btnBackToHome);

        add(pnlSaveAndHome, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 330, 80, 70));
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            var formatA = new FormatA();
            formatA.setTitle(txtTitleProjectDegree.getText());
            String modality = (String) cbxMode.getSelectedItem();
            formatA.setModality(modality);
            formatA.setCreateAt(LocalDate.now());
            formatA.setDirector(txtDirector.getText());
            formatA.setCodirector(txtCoDirector.getText());
            formatA.setGeneralObjective(txtGeneralObjective.getText());
            formatA.setSpecificObjectives(txtSpecificObjectives.getText());
            formatA.setFormatA(fileFormatA);

            //Validaciones antes de guardar
            if (formatA.getTitle() == null || formatA.getTitle().isBlank()
                    || formatA.getDirector() == null || formatA.getDirector().isBlank()
                    || formatA.getGeneralObjective() == null || formatA.getGeneralObjective().isBlank()
                    || formatA.getSpecificObjectives() == null || formatA.getSpecificObjectives().isBlank()
                    || formatA.getFormatA() == null) {
                if (modality.equals("Investigación")) {
                    JOptionPane.showMessageDialog(this,
                            "Por favor, completa todos los campos y adjunta el Formato A.",
                            "Error de validación",
                            JOptionPane.ERROR_MESSAGE);
                } else {
                    if (modality.equals("Práctica profesional") && fileAcceptanceLetter != null) {
                        formatA.setAcceptanceLetter(fileAcceptanceLetter);
                    } else {
                        //Si la modalidad es Practica profesional debe subir la carta de aceptacion
                        if (modality.equals("Práctica profesional")) {
                            JOptionPane.showMessageDialog(this,
                                    "Por favor, completa todos los campos, adjunta el Formato A y la carta de aceptación",
                                    "Error de validación",
                                    JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }

                return;
            }

            var idTeacher = UploadFormatADirector.getInstance().getIdTeacher();
            Controller.saveFormatA(idTeacher, formatA);

            JOptionPane.showMessageDialog(this, "Formato A guardado correctamente.");
            // Limpiar campos
            txtTitleProjectDegree.setText("");
            txtDirector.setText("");
            txtCoDirector.setText("");
            txtGeneralObjective.setText("");
            txtSpecificObjectives.setText("");
            cbxMode.setSelectedIndex(0);
            txtUploadFormatA.setText("");
            txtUploadLetter.setText("");

            // Limpiar archivos
            fileFormatA = null;
            fileAcceptanceLetter = null;

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnUploadFormatAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadFormatAActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        int option = fileChooser.showOpenDialog(null);

        if (option == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            String fileName = selectedFile.getName();
            // Validar extensión PDF
            if (!fileName.toLowerCase().endsWith(".pdf")) {
                JOptionPane.showMessageDialog(this,
                        "El archivo debe estar en formato PDF",
                        "Archivo inválido",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            try {
                File uploadDir = new File("uploads");
                if (!uploadDir.exists()) {
                    uploadDir.mkdir();
                }

                String uniqueID = UUID.randomUUID().toString();

                String extension = "";
                int dotIndex = fileName.lastIndexOf(".");
                if (dotIndex > 0) {
                    extension = fileName.substring(dotIndex);
                }

                String newFileName = uniqueID + extension;

                Path destination = Paths.get("uploads", newFileName);
                Files.copy(selectedFile.toPath(), destination, StandardCopyOption.REPLACE_EXISTING);

                txtUploadFormatA.setText(fileName);
                System.out.println(destination.toString());

                fileFormatA = new FilesHistory();
                fileFormatA.setFileName(fileName);
                fileFormatA.setFileUrl(destination.toString());
                fileFormatA.setUploadDate(LocalDate.now());

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
            }
        }

    }//GEN-LAST:event_btnUploadFormatAActionPerformed


    private void btnUploadLetterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadLetterActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        int option = fileChooser.showOpenDialog(null);

        if (option == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            String fileName = selectedFile.getName();
            // Validar extensión PDF
            if (!fileName.toLowerCase().endsWith(".pdf")) {
                JOptionPane.showMessageDialog(this,
                        "El archivo debe estar en formato PDF",
                        "Archivo inválido",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            try {
                File uploadDir = new File("uploads");
                if (!uploadDir.exists()) {
                    uploadDir.mkdir();
                }

                String uniqueID = UUID.randomUUID().toString();

                String extension = "";
                int dotIndex = fileName.lastIndexOf(".");
                if (dotIndex > 0) {
                    extension = fileName.substring(dotIndex);
                }

                String newFileName = uniqueID + extension;

                Path destination = Paths.get("uploads", newFileName);
                Files.copy(selectedFile.toPath(), destination, StandardCopyOption.REPLACE_EXISTING);

                txtUploadLetter.setText(fileName);
                System.out.println(destination.toString());

                fileAcceptanceLetter = new FilesHistory();
                fileAcceptanceLetter.setFileName(fileName);
                fileAcceptanceLetter.setFileUrl(destination.toString());
                fileAcceptanceLetter.setUploadDate(LocalDate.now());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnUploadLetterActionPerformed

    private void cbxModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxModeActionPerformed
        // TODO add your handling code here:
        String opcion = (String) cbxMode.getSelectedItem();
        boolean status = opcion.equals("Práctica profesional");
        btnUploadLetter.setVisible(status);
        txtUploadLetter.setVisible(status);
        System.out.println("Seleccionaste: " + opcion);
    }//GEN-LAST:event_cbxModeActionPerformed

    private void btnBackToHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackToHomeActionPerformed
        Controller.OpenPanel(new Selector());
    }//GEN-LAST:event_btnBackToHomeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBackToHome;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUploadFormatA;
    private javax.swing.JButton btnUploadLetter;
    private javax.swing.JComboBox<String> cbxMode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCoDirector;
    private javax.swing.JLabel lblCurrentDate1;
    private javax.swing.JLabel lblCurrentDateShow;
    private javax.swing.JLabel lblDirector;
    private javax.swing.JLabel lblGeneralObjective;
    private javax.swing.JLabel lblMode;
    private javax.swing.JLabel lblSpecificObjectives;
    private javax.swing.JLabel lblTitleProjectDegree;
    private javax.swing.JPanel pnlAtributes;
    private javax.swing.JPanel pnlSaveAndHome;
    private javax.swing.JTextField txtCoDirector;
    private javax.swing.JTextField txtDirector;
    private javax.swing.JTextPane txtGeneralObjective;
    private javax.swing.JTextPane txtSpecificObjectives;
    private javax.swing.JTextField txtTitleProjectDegree;
    private javax.swing.JTextField txtUploadFormatA;
    private javax.swing.JTextField txtUploadLetter;
    // End of variables declaration//GEN-END:variables
}
